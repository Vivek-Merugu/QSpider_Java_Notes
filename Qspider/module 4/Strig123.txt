   STRING PROGRAMMING:-
  -----------------------

-A GROUP CHARACTERS REPRESENTS A STRING.

String-string is predefine class which is present in java.lang package(FOLDER)
--------
in java string is an
1.object
2.datatype
3.class
4.group of characters

concept: We will study some important methods of string class and use them in our program
         and fulfill our programming requirement.

objects
--------
2 ways
1.using new keyword 2---> objects will get created
   1. one is under heap area-reference var assigned to it
   2.another is under string constant pool-it is small part of
    heap area-no
  

2.using literal:
--------------------
first jvm will go to SCP and check is there any object present
 with string data 
if it is there it will assign reference to it ,if it is 
not there it creates new object and assign
reference

IMMUTABILITY
-------------
From above example we understood that for one string object 
there can be multiple reference
assign to it if we changes data of one string object
 it will effect to multiple
references thats why java says that string objects are 
immutable i.e once we 
created we cannot modify it.

Notes:
------
in the above example with new keyword 2 objects will get 
created one is under heap and another is under scp.
since concat operation is performed during runtime
concatinated object will get created under heap area

since there is no reference assign to concatiated object it is
eligible for deletion and garbage collector will delete
this object.

since s1 is refferring to java we will get output as java .
methods of String class
-----------------------
1.length():int
--------------
it provides length of String
length will always calculated from 1
    for ex:String s="java";
           System.out.println(s.length());
           output:4
public class FirstP {

	public static void main(String[] args) {
		String s ="i am a java developer";
		System.out.println(s.length());

	}}

Output
------
21

2.charAt(int Index):char
--------------------
it provides character at given index
      for ex:String s="java";
             System.out.println(s.charAt(3));//output is a

Note:
------
if we provide invalid index as args for charAt() we will get 
StringIndexOutOfBoundsException
Ex: String s="java";
    System.out.println(s.charAt(4));--->StringIndexOutOfBoundsException







program to solve
----------------
WAP to count no of e characters present in given string
Sring s="Eewwwweeee".
WAP to print all vowels from given String
String s="javadevelopment"
WAP to count total no of vowels from given String
String s="javadevelopment"
OUTPUT:6

public class FirstP {

	public static void main(String[] args) {
		String s ="javadev";
		
		int count=0;
		for(int i=0;i<s.length();i++)
		{
if(s.charAt(i)=='a'||s.charAt(i)=='e'||s.charAt(i)=='i'||s.charAt(i)=='o'||s.charAt(i)=='u')
			{
				System.out.println(s.charAt(i));
				count++;
			}
		}


		System.out.println("Count of vowels in smallercase is :"+count);
	}


WAP to count individual no of vowels from given String
String s="javadevelopment"
OUTPUT :a=2,e=3,i=0,o=1,u=0



3.object1.equals(object2):boolean
---------------------------------
it checks whether two string are same or not
i.e it compares two strings based on string data
   1.String s1="java";
     String s2="java";
    System.out.println(s1.equals(S2));//true
  2.
   String s1="java";
   String s2="javadev";
    System.out.println(s1.equals(S2));//false
 3.
   String s1="java";
   String s2="JAva";
    System.out.println(s1.equals(S2));//false
because equals method consider case sensitivity  
  
4.object1.equalsIgnoreCase(object2)
-----------------------------------
 compares two strings based on string data without considering
 case sensitivity.

WAP to count total no of words present in string
String s="I am a java developer"

public class Reverse {
public static void main(String[] args) {
		String actual="Aba";
		String rev="";
		
		for(int i=actual.length()-1;i>=0;i--)
		{
				rev=rev+actual.charAt(i);//"ve"+'d'
		}
		System.out.println("Actual String : "+actual);
		System.out.println("Reverse String : "+rev);
		if(actual.equalsIgnoreCase(rev))
       {
	        System.out.println("Given String is pallindrome");
        }
		else
		{
			System.out.println("Non palindrome");
		}
        
	}

}

5.trim():String
-------------
it removes white spaces from starting and ending of string
trim() will not removes spaces from middle 
ex:  s="  java dev ";
     s.trim();---->"java dev"


public class countwords {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		String s=" I am a java developer  ";
		System.out.println("Before Trimming : "+s);
		String s1=s.trim();//I am a java developer
		System.out.println("After trimming : "+s1);
		int count=1;//In my string atleast one word is there
		for(int i=0;i<s1.length();i++)
		{
			if(s1.charAt(i)==' '&&s1.charAt(i+1)!=' ')
			{
				count++;
			}
		}
System.out.println("Count is"+count);
	}

}














6.subString(int arg):String
----------------------------------------------
-it provides subpart of a string.

  ex:String s="java development";
     String s1=s.subString(1);--->from 1stindex till last index
     SOP(s1);


 subString(int fromindex,int toindex):String
---------------------------------------------
  subString(int fromindex(including),int toindex(excluding)):String 
 ex:String s="java";
     String s1=s.subString(1,3);//(1,3-1)//av
      SOP(s1);
















6.indexOf()
-----------

indexOf(char):int
indexOf(String):int
indexOf(char,int fromindex):int
indexOf(String ,intfromindex):int
-------------------------------


it provides index value for given string or character.
forEx:
       String s="java"

   1.int i=s.indexOf('v');//2

   2.int j=s.indexOf("va");//2

   3.int k=s.indexOf("ava",1);//1--->provide index of a but start searching from 2nd index

    4.int l=s.indexOf('Z');//-1

Note : indexOf() returns -1 if character or string is not present 


public class INdexoff {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
          String s="java development";
          int i=s.indexOf('a');//--->1
          System.out.println(i);
          
          int j=s.indexOf("dev");//--->5
          System.out.println(j);
          
          int k=s.indexOf('a',2);//-->3
          System.out.println(k);
          
          int l=s.indexOf("eve",4);//-->6
          System.out.println(l);
          
          int m=s.indexOf('Z');
          System.out.println(m);
	}

}
program using indexOf()
-----------------------
1.WAP to print all character only once from string

  String s="javajavajavadevdevdev"

  output:javde


public class Uniq {
public static void main(String[] args) {
  String s="javajavajavadevdev";
  String un="";
  
  for(int i=0;i<s.length();i++)
  {
	  char ch=s.charAt(i);
	 if(un.indexOf(ch)==-1)
	 {
		 un=un+ch;
	 }
  }

  
  System.out.println("Unique string is :"+un);
	}

}