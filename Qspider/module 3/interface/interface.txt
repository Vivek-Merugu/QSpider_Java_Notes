
   gmb2502@gmail.com----->madhuri

INTERFACE
----------
Prog dEf:
---------
An interface is a type definition block(Block of codes) whose type convention is same as that of
 class.
   interface Animal
    {
       void eat();
       void makenoise();
       void color();
       void species();
     }
-An interface has to be represented with interface keyword.

syntax:
---------
interfacekeyword  interfacename
{

//body of interface
}


-By default all the methods of interface are public and abstract whether we write or don't 
write

        interface A                                      interface A
         {                                               {
             void run();                                    public abstract void run();
             public void fly(); <---------------->          public abstract void fly();
             abstract public void cry();                    public abstract void cry();
                                                         }
            }




-By default all the variables of interface are public static and final whether u write it
or u don't write it

              interface A
              {
                 int i=9;      //public static final int i=9;
                 static String s="java";//public static final Sring s="java";
                 final int k=88;//public static final int k=88;
                 public static final float fq=99.9f;
              }

 Example
--------              
-interface A
  {
      int i;//public static final
      System.out.println(i);
    }
-CTE because all var's are final and it's mandatory to initialise final during declaration.
-Constructors are not allowed in interface because there is no non static variable by default all
 variables are public static and final.
                 interface A
                 {
                    int abc=3;
                    public A()//CTE because constructors are not allowed
                   {}
                   }

Can we instantiate an interface?
OR
-Can we create an object of interface?
A>No we cannot create an object of interface because all methods are by default abstract.
   but we can create a reference of interface.
-implements
-----------
implements is the keyword we will use if any class wants to form a relationship
with interface.
syntax
---------
      interface Car
      { 
      }
      class Audi implements Car
       {
       }

class --------class------------->extends
interface-----interface--------->extends
class----------interface------->implements
interface -------class----->Not possible

-A class can extend only one class at a time
-An interface can extend multiple interfaces at a time
-A class can implement multiple interface at a time






-Whenever any class forms a relation with interface it is the responsibility of that class
 to 

Rule-1:Either complete all incomplete methods of interface

Rule-2: Declare the class as abstract.
Interface-Atm
---------------
interface ATM 
{
	void deposit();
	void withdrawl();

}
Cust.java
-----------
class Cust implements ATM
{
	@Override
	public void deposit() {
		// TODO Auto-generated method stub
		System.out.println("Please deposit ur amount");
		
	}
	@Override
	public void withdrawl() {
		// TODO Auto-generated method stub
		System.out.println("Collect ur amount");
	}}
User.java
-----------
public class User {
public static void main(String[] args) {
	//ATM a1=new ATM();	
	Cust s1=new Cust();
		s1.deposit();
		s1.withdrawl();
		}}

Output
-------
Please deposit ur amount
Collect ur amount
Rule-2
-------
public interface Employers {

	 void salarybankacc();
	 void projects();
	abstract public void trainingCenter();
	abstract public void depts();
	}
Infosys.java
-------------
//it is abstract class because it didn't completed projects()
abstract class Infosys implements Employers {

	public void salarybankacc() {
		// TODO Auto-generated method stub
		System.out.println("HDFC will process salary for employee");
		
	}
@Override
	public void trainingCenter() {
	
		System.out.println("It is in bhubaneswar");
	}
@Override
	public void depts() 
	{
	    System.out.println(" It comprises of all major depts of IT sector");
		
	}}

BangaloreDC.java
----------------
class BangaloreDC extends Infosys
{
	public void projects() {
		// TODO Auto-generated method stub
		System.out.println("We are mainly focusing on serving for insurance and Investement");
	}}

User.java
---------
public class User {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		//Employers e=new Employers();//CTE
		//Infosys i=new Infosys();//CTE
		BangaloreDC d=new BangaloreDC();
		d.depts();
		d.projects();
		d.salarybankacc();
		d.trainingCenter();
}}
Output
--------
It comprises of all major depts of IT sector
We are mainly focusing on serving for insurance and Investement
HDFC will process salary for employee
It is in bhubaneswar

Assignment
--------------
1.interface book
---------------
void bookname();
void author();
void dateofborrowing();

class java implements book
---------------------------
complete book interafce methods

class sql implements book
--------------------------
complete book interafce methods

class Apti implements book
-----------------------------
complete book interface methods
userlogic class
-----------------
class librarian
create objects of all clases and access those methods


Program-2
----------
1.interface Car
--------------------
void carname();
void color();
void price();

class Audi implements car
---------------------------
complete carname() and color() and don not complete price()

class AudiModels extends Audi
------------------------------
complete price() as per different models

userlogic class
-----------------
class Showroom
create objects Audimodels class access those methods

RBI program
------------
package objectoreintedprog;

interface RBI
{
	void deposits();
	void withdrawls();
	void aadharLink();
	void minBal();
	//default method
	default void KYC()
	{
		System.out.println("Update ur KYC as early as possible");
	}
}

abstract class SBI implements RBI
{
public void deposits() {
		System.out.println("U can deposit ur money in SBH happily");
		
	}
public void withdrawls() {
		System.out.println("U can withdrawl ur money from SBH sadly");
		
}
public void aadharLink() {
		System.out.println("As per rule of RBI please link ur aadhar with account");
	}}
class SBH extends SBI
{
	public void minBal() {
		System.out.println("As per rules please maintain 3k as Min balance");
	}
	
}

class ICIC implements RBI
{

	public void deposits() {
		// TODO Auto-generated method stub
		System.out.println("U can deposit ur money in ICIC happily");
	}

	@Override
	public void withdrawls() {
		// TODO Auto-generated method stub
		System.out.println("U can withdrawl ur money from ICIC happily");
	}

	@Override
	public void aadharLink() {
		// TODO Auto-generated method stub
		System.out.println("A per rule u need to link Aadhar");
	}

	@Override
	public void minBal() {
		// TODO Auto-generated method stub
		System.out.println("For All ICIC cust it is mandt to maintain min bal of 2500Rs/-");
	}
	
}

class PNB implements RBI
{

	@Override
	public void deposits() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void withdrawls() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void aadharLink() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void minBal() {
		// TODO Auto-generated method stub
		
	}
	
}

class HDFC implements RBI
{

	@Override
	public void deposits() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void withdrawls() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void aadharLink() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void minBal() {
		// TODO Auto-generated method stub
		
	}
	
}
public class People {

	public static void main(String[] args) 
	{
		SBH s1=new SBH();
		s1.aadharLink();
		s1.minBal();
		s1.deposits();
		s1.withdrawls();
		s1.KYC();
		ICIC i1=new ICIC();
		i1.aadharLink();
		i1.deposits();
		i1.withdrawls();
		i1.minBal();
		i1.KYC();
		
		}

}















Multiple Inheritance through Interface
-------------------------------------------
interface A1
{
	void m1();
}
interface B
{
	void m2();
	}
class C implements A1,B
{public void m1() {
		System.out.println("In m1 method");
	}
	public void m2() {
		System.out.println("In m2 method");
	}}
public class Main {
public static void main(String[] args) {
	C c1=new C();
	c1.m1();
	c1.m2();
}
}
-Through clsses it is not possible because of:
-Ambiguity p   -diamond p   -Constructor chaining p

Why Multiple inheritance is possible through interface?
A.
-A class cannot extend more than one class but it can implements multiple interfaces.

-In interafce there is no possibility of Ambiguity probleum because even though 
  multiple interfaces contains same method name but implementation will be given only
  once because in interface class gives implementation and it won't implement multiple
  methods with same name and same argument in single class

Ex:interface A1
{
	void m1();
}
interface B
{
	void m1();
	}
class C implements A1,B
{
	public void m1() {
		System.out.println("In m1 method");
	}}
public class Main {
public static void main(String[] args) {
	C c1=new C();
	c1.m1();}}

-Since interface does not contain Constructors there is no possibility of 
 Constructor chaining in interface.


-Therefore when there is no ambiguity probleum and constructor chaining probleum 
  we can achieve multiple inheritance through interface.


	



































































